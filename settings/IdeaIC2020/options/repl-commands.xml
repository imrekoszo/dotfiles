<application>
  <component name="ReplCommandManager">
    <repl-command name="ctr clojure test run tests" executionType="EXPRESSION" commandText="(@(requiring-resolve 'clojure.test/run-tests))" executeBefore="NONE" executionNs="REPL_CURRENT" inNamespace="" saveAll="true" />
    <repl-command name="dev" executionType="EXPRESSION" commandText="(dev)" executeBefore="SYNC_ALL" executionNs="EXPLICIT_NS" inNamespace="user" saveAll="true" />
    <repl-command name="ece last exception cause data" executionType="EXPRESSION" commandText="(-&gt; *e ex-cause ex-data)" executeBefore="NONE" executionNs="REPL_CURRENT" inNamespace="" saveAll="true" />
    <repl-command name="ed last exception data" executionType="EXPRESSION" commandText="(-&gt; *e ex-data)" executeBefore="NONE" executionNs="REPL_CURRENT" inNamespace="" saveAll="true" />
    <repl-command name="ele evaluate last exception" executionType="EXPRESSION" commandText="*e" executeBefore="NONE" executionNs="REPL_CURRENT" inNamespace="" saveAll="true" />
    <repl-command name="kra kaocha run all" executionType="EXPRESSION" commandText="(do&#10;  (require 'clojure.spec.alpha 'expound.alpha 'kaocha.repl)&#10;  (binding [clojure.spec.alpha/*explain-out* expound.alpha/printer]&#10;    (kaocha.repl/run-all)))" executeBefore="SYNC_ALL" executionNs="REPL_CURRENT" inNamespace="" saveAll="true" />
    <repl-command name="krao kaocha run all with orchestra" executionType="EXPRESSION" commandText="(do&#10;  (require 'clojure.spec.alpha 'expound.alpha 'kaocha.repl 'orchestra.spec.test)&#10;  (orchestra.spec.test/instrument)&#10;  (try&#10;    (binding [clojure.spec.alpha/*explain-out* expound.alpha/printer]&#10;      (kaocha.repl/run-all))&#10;    (finally (orchestra.spec.test/unstrument))))" executeBefore="NONE" executionNs="REPL_CURRENT" inNamespace="" saveAll="true" />
    <repl-command name="krn kaocha run current ns" executionType="EXPRESSION" commandText="(do&#10;  (require 'clojure.spec.alpha 'expound.alpha 'kaocha.repl)&#10;  (binding [clojure.spec.alpha/*explain-out* expound.alpha/printer]&#10;    (kaocha.repl/run)))" executeBefore="LOAD_CURRENT" executionNs="REPL_CURRENT" inNamespace="" saveAll="true" />
    <repl-command name="krno kaocha run current ns with orchestra" executionType="EXPRESSION" commandText="(do&#10;  (require 'clojure.spec.alpha 'expound.alpha 'kaocha.repl 'orchestra.spec.test)&#10;  (orchestra.spec.test/instrument)&#10;  (try&#10;    (binding [clojure.spec.alpha/*explain-out* expound.alpha/printer]&#10;      (kaocha.repl/run))&#10;    (finally (orchestra.spec.test/unstrument))))" executeBefore="NONE" executionNs="REPL_CURRENT" inNamespace="" saveAll="true" />
    <repl-command name="mp mount stop" executionType="EXPRESSION" commandText="(@(requiring-resolve 'mount.core/stop))" executeBefore="NONE" executionNs="REPL_CURRENT" inNamespace="" saveAll="true" />
    <repl-command name="mr mount restart" executionType="EXPRESSION" commandText="(do&#10;  (require 'mount.core)&#10;  (mount.core/stop)&#10;  (mount.core/start))" executeBefore="NONE" executionNs="REPL_CURRENT" inNamespace="" saveAll="true" />
    <repl-command name="mt mount start" executionType="EXPRESSION" commandText="(@(requiring-resolve 'mount.core/start))" executeBefore="LOAD_CURRENT" executionNs="REPL_CURRENT" inNamespace="" saveAll="true" />
    <repl-command name="oi orchestra instrument" executionType="EXPRESSION" commandText="(-&gt; (@(requiring-resolve 'orchestra.spec.test/instrument)) sort)" executeBefore="NONE" executionNs="REPL_CURRENT" inNamespace="" saveAll="true" />
    <repl-command name="ou orchestra unstrument" executionType="EXPRESSION" commandText="(-&gt; (@(requiring-resolve 'orchestra.spec.test/unstrument)) sort)" executeBefore="NONE" executionNs="REPL_CURRENT" inNamespace="" saveAll="true" />
    <repl-command name="rebl" executionType="EXPRESSION" commandText="(@(requiring-resolve 'cognitect.rebl/ui))" executeBefore="NONE" executionNs="REPL_CURRENT" inNamespace="" saveAll="true" />
    <repl-command name="rrefresh-all" executionType="EXPRESSION" commandText="(do (try (@(requiring-resolve 'user/stop)) (catch Exception _))&#10;    (@(requiring-resolve 'clojure.tools.namespace.repl/refresh-all)))" executeBefore="NONE" executionNs="REPL_CURRENT" inNamespace="" saveAll="true" />
    <repl-command name="rerun last command" executionType="LAST" commandText="" executeBefore="NONE" executionNs="ORIGINAL_NS" inNamespace="" saveAll="true" />
    <repl-command name="si spec instrument" executionType="EXPRESSION" commandText="(-&gt; (@(requiring-resolve 'clojure.spec.test.alpha/instrument)) sort)" executeBefore="NONE" executionNs="REPL_CURRENT" inNamespace="" saveAll="true" />
    <repl-command name="sic speculative instrument core" executionType="EXPRESSION" commandText="(-&gt; (@(requiring-resolve 'speculative.instrument/instrument)) sort)" executeBefore="NONE" executionNs="REPL_CURRENT" inNamespace="" saveAll="true" />
    <repl-command name="su spec unstrument" executionType="EXPRESSION" commandText="(-&gt; (@(requiring-resolve 'clojure.spec.test.alpha/unstrument)) sort)" executeBefore="NONE" executionNs="REPL_CURRENT" inNamespace="" saveAll="true" />
    <repl-command name="suc speculative unstrument core" executionType="EXPRESSION" commandText="(-&gt; (@(requiring-resolve 'speculative.instrument/unstrument)) sort)" executeBefore="NONE" executionNs="REPL_CURRENT" inNamespace="" saveAll="true" />
    <repl-command name="warn on reflection" executionType="EXPRESSION" commandText="(do (alter-var-root #'clojure.core/*warn-on-reflection* not)&#10;    {:warn-on-reflection&#10;     *warn-on-reflection*&#10;&#10;     :thread&#10;     (-&gt; (Thread/currentThread)&#10;         (bean)&#10;         (dissoc :contextClassLoader&#10;                 :threadGroup&#10;                 :uncaughtExceptionHandler&#10;                 :stackTrace&#10;                 :state&#10;                 :class))})" executeBefore="NONE" executionNs="REPL_CURRENT" inNamespace="" saveAll="true" />
    <repl-command name="bench" executionType="EXPRESSION" commandText="(do&#10;  (require 'criterium.core)&#10;  (criterium.core/with-progress-reporting&#10;   (criterium.core/bench&#10;    ~selected-form&#10;    :verbose)))" executeBefore="NONE" executionNs="REPL_CURRENT" inNamespace="" saveAll="true" />
    <repl-command name="quick bench" executionType="EXPRESSION" commandText="(do&#10;  (require 'criterium.core)&#10;  (criterium.core/with-progress-reporting&#10;   (criterium.core/quick-bench&#10;    ~selected-form&#10;    :verbose)))" executeBefore="NONE" executionNs="REPL_CURRENT" inNamespace="" saveAll="true" />
    <repl-command name="reflect namespace ns" executionType="EXPRESSION" commandText="(some-&gt;&#10; '~selected-form&#10; ((some-fn (ns-aliases *ns*) find-ns))&#10; (@(requiring-resolve 'com.stuarthalloway.reflector/on)))" executeBefore="NONE" executionNs="REPL_CURRENT" inNamespace="" saveAll="true" />
    <repl-command name="measure" executionType="EXPRESSION" commandText="(@(requiring-resolve 'clj-memory-meter.core/measure)&#10; ~selected-form)" executeBefore="NONE" executionNs="REPL_CURRENT" inNamespace="" saveAll="true" />
    <repl-command name="measure shallow" executionType="EXPRESSION" commandText="(@(requiring-resolve 'clj-memory-meter.core/measure)&#10; ~selected-form :shallow true)" executeBefore="NONE" executionNs="REPL_CURRENT" inNamespace="" saveAll="true" />
    <repl-command name="measure debug" executionType="EXPRESSION" commandText="(@(requiring-resolve 'clj-memory-meter.core/measure)&#10; ~selected-form :debug true)" executeBefore="NONE" executionNs="REPL_CURRENT" inNamespace="" saveAll="true" />
    <repl-command name="decompile" executionType="EXPRESSION" commandText="(do&#10;  (require 'clj-java-decompiler.core)&#10;  (clj-java-decompiler.core/decompile ~selected-form))" executeBefore="NONE" executionNs="REPL_CURRENT" inNamespace="" saveAll="true" />
    <repl-command name="user reset" executionType="EXPRESSION" commandText="(@(requiring-resolve 'user/reset))" executeBefore="NONE" executionNs="REPL_CURRENT" inNamespace="" saveAll="true" />
    <repl-command name="user stop" executionType="EXPRESSION" commandText="(@(requiring-resolve 'user/stop))" executeBefore="NONE" executionNs="REPL_CURRENT" inNamespace="" saveAll="true" />
    <repl-command name="hashp require" executionType="EXPRESSION" commandText="(require 'hashp.core)" executeBefore="NONE" executionNs="REPL_CURRENT" inNamespace="" saveAll="true" />
    <repl-command name="trace require clojure.tools.trace" executionType="EXPRESSION" commandText="(require 'clojure.tools.trace)" executeBefore="NONE" executionNs="REPL_CURRENT" inNamespace="" saveAll="true" />
    <repl-command name="expound set" executionType="EXPRESSION" commandText="(do (require 'clojure.spec.alpha 'expound.alpha)&#10;    (set! clojure.spec.alpha/*explain-out* expound.alpha/printer))" executeBefore="NONE" executionNs="EXPLICIT_NS" inNamespace="user" saveAll="true" />
    <repl-command name="expound integrant" executionType="EXPRESSION" commandText="(do (require 'clojure.spec.alpha 'expound.alpha)&#10;    (binding [clojure.spec.alpha/*explain-out*&#10;              expound.alpha/printer]&#10;      (-&gt; *e ex-data :explain expound.alpha/explain-result)))" executeBefore="NONE" executionNs="EXPLICIT_NS" inNamespace="user" saveAll="true" />
    <repl-command name="user refresh" executionType="EXPRESSION" commandText="(@(requiring-resolve 'user/refresh))" executeBefore="NONE" executionNs="REPL_CURRENT" inNamespace="" saveAll="true" />
    <repl-command name="rrefresh" executionType="EXPRESSION" commandText="(do (try (@(requiring-resolve 'user/stop)) (catch Exception _))&#10;    (@(requiring-resolve 'clojure.tools.namespace.repl/refresh)))" executeBefore="NONE" executionNs="REPL_CURRENT" inNamespace="" saveAll="true" />
    <repl-command name="Tap Last Expression" executionType="EXPRESSION" commandText="(tap&gt; *1)" executeBefore="NONE" executionNs="REPL_CURRENT" inNamespace="" saveAll="false" />
    <repl-command name="reveal" executionType="EXPRESSION" commandText="(do&#10;  (System/setProperty &quot;vlaaad.reveal.prefs&quot; &quot;{:theme :light :font-family \&quot;Fira Code\&quot; :font-size 14}&quot;)&#10;  (require 'vlaaad.reveal)&#10;  (require 'com.phronemophobic.reveal-treemap)&#10;  (add-tap (vlaaad.reveal/ui)))" executeBefore="NONE" executionNs="REPL_CURRENT" inNamespace="user" saveAll="false" />
    <repl-command name="clear reveal output" executionType="EXPRESSION" commandText="(tap&gt; {:vlaaad.reveal/command '(clear-output)})" executeBefore="NONE" executionNs="REPL_CURRENT" inNamespace="" saveAll="false" />
  </component>
</application>