<templateSet group="Clojure">
  <template name="check" value="(do&#10;  (require 'clojure.spec.test.alpha)&#10;  (clojure.spec.test.alpha/check `$SELECTION$$END$))" description="clojure.spec.test.alpha/check" toReformat="true" toShortenFQNames="true" deactivated="true">
    <context>
      <option name="Clojure" value="true" />
    </context>
  </template>
  <template name="instro" value="(do&#10;  (require '[orchestra.spec.test])&#10;  (-&gt; (orchestra.spec.test/instrument$SELECTION$$END$) sort))" description="Instrument with orchestra" toReformat="true" toShortenFQNames="true" deactivated="true">
    <context>
      <option name="Clojure" value="true" />
    </context>
  </template>
  <template name="instrument" value="(do&#10;  (require '[clojure.spec.test.alpha])&#10;  (-&gt; (clojure.spec.test.alpha/instrument$SELECTION$$END$) sort))" description="instrument with spec" toReformat="true" toShortenFQNames="true" deactivated="true">
    <context>
      <option name="Clojure" value="true" />
    </context>
  </template>
  <template name="comment form" value="#_$END$" description="#_" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="Clojure" value="true" />
    </context>
  </template>
  <template name="spytap" value="((fn spytap [x] (comment 'ensure-linter-fails (map)) (tap&gt; x) x)&#10; $SELECTION$$END$)" description="" toReformat="false" toShortenFQNames="true" deactivated="true">
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="bench basic" value="(dotimes [_ 10]&#10;  (time&#10;    (dotimes [_ $times$] &#10;      $SELECTION$$END$)))" description="Wrap with quick benchmark" toReformat="true" toShortenFQNames="true" deactivated="true">
    <variable name="times" expression="" defaultValue="&quot;10000&quot;" alwaysStopAt="true" />
    <context>
      <option name="Clojure" value="true" />
    </context>
  </template>
  <template name="bench criterium" value="(do&#10;  (require 'criterium.core)&#10;  (criterium.core/with-progress-reporting&#10;   (criterium.core/quick-bench&#10;    $SELECTION$$END$&#10;    :verbose)))&#10;" description="Benchmark with criterium" toReformat="true" toShortenFQNames="true" deactivated="true">
    <context>
      <option name="Clojure" value="true" />
    </context>
  </template>
  <template name="profile" value=";; ensure these are set: -Djdk.attach.allowAttachSelf -XX:+UnlockDiagnosticVMOptions -XX:+DebugNonSafepoints&#10;(require '[clj-async-profiler.core :as prof])&#10;(prof/serve-files 8888)&#10;(prof/start)&#10;(prof/stop)&#10;(prof/profile&#10;  (dotimes [i 10000]&#10;    (reduce + (range i))))&#10;" description="Profile with clj-async-profiler" toReformat="true" toShortenFQNames="true" deactivated="true">
    <context>
      <option name="Clojure" value="true" />
    </context>
  </template>
  <template name="condp" value="(condp $pred$ $expr$&#10;  $END$)" description="condp" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="pred" expression="" defaultValue="&quot;pred&quot;" alwaysStopAt="true" />
    <variable name="expr" expression="" defaultValue="&quot;expr&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="defn" value="(defn $name$&#10;  &quot;$docstring$&quot;&#10;  [$arglist$]&#10;  $END$)" description="defn" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="name" expression="" defaultValue="&quot;name&quot;" alwaysStopAt="true" />
    <variable name="docstring" expression="" defaultValue="&quot;docstring&quot;" alwaysStopAt="true" />
    <variable name="arglist" expression="" defaultValue="&quot;arglist&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="defm" value="(defmacro $name$&#10;  &quot;$docstring$&quot;&#10;  [$arglist$]&#10;  $END$)" description="defmacro" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="name" expression="" defaultValue="&quot;name&quot;" alwaysStopAt="true" />
    <variable name="docstring" expression="" defaultValue="&quot;docstring&quot;" alwaysStopAt="true" />
    <variable name="arglist" expression="" defaultValue="&quot;arglist&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="defmm" value="(defmulti $name$ $dispatchfn$)" description="defmulti" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="name" expression="" defaultValue="&quot;name&quot;" alwaysStopAt="true" />
    <variable name="dispatchfn" expression="" defaultValue="&quot;dispatchfn&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="defmt" value="(defmethod $name$ $match$&#10;  [$args$]&#10;  $END$)" description="defmethod" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="name" expression="" defaultValue="&quot;name&quot;" alwaysStopAt="true" />
    <variable name="match" expression="" defaultValue="&quot;match&quot;" alwaysStopAt="true" />
    <variable name="args" expression="" defaultValue="&quot;args&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="defp" value="(defprotocol $Name$&#10;  $END$)" description="defprotocol" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="Name" expression="" defaultValue="&quot;Name&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="defr" value="(defrecord $Name$ [$fields$]&#10;  $Protocol$&#10;  $END$)" description="defrecord" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="Name" expression="" defaultValue="&quot;Name&quot;" alwaysStopAt="true" />
    <variable name="fields" expression="" defaultValue="&quot;fields&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="deft" value="(deftype $Name$ [$fields$]&#10;  $Protocol$&#10;  $END$)" description="deftype" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="Name" expression="" defaultValue="&quot;Name&quot;" alwaysStopAt="true" />
    <variable name="fields" expression="" defaultValue="&quot;fields&quot;" alwaysStopAt="true" />
    <variable name="Protocol" expression="" defaultValue="&quot;Protocol&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="doseq" value="(doseq [$binding$ $value$]&#10;  $END$)" description="doseq" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="binding" expression="" defaultValue="&quot;binding&quot;" alwaysStopAt="true" />
    <variable name="value" expression="" defaultValue="&quot;value&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="fn" value="(fn [$arglist$] $END$)" description="fn" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="arglist" expression="" defaultValue="&quot;arglist&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="for" value="(for [$binding$ $expr$]&#10;  $END$)" description="for" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="binding" expression="" defaultValue="&quot;binding&quot;" alwaysStopAt="true" />
    <variable name="expr" expression="" defaultValue="&quot;expr&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="if" value="(if $test$&#10;  $then$&#10;  $else$)" description="if" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="test" expression="" defaultValue="&quot;test&quot;" alwaysStopAt="true" />
    <variable name="then" expression="" defaultValue="&quot;then&quot;" alwaysStopAt="true" />
    <variable name="else" expression="" defaultValue="&quot;else&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="ifl" value="(if-let [$binding$ $value$]&#10;  $END$)" description="ifl" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="binding" expression="" defaultValue="&quot;binding&quot;" alwaysStopAt="true" />
    <variable name="value" expression="" defaultValue="&quot;value&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="import" value="(:import [$package$])" description="import ns clause" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="package" expression="" defaultValue="&quot;package&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="clojure.test 'is' assertion" value="(is (= $first$ $second$))" description="is" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="first" expression="" defaultValue="&quot;first&quot;" alwaysStopAt="true" />
    <variable name="second" expression="" defaultValue="&quot;second&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="let" value="(let [$binding$ $value$]&#10;  $END$)" description="let" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="binding" expression="" defaultValue="&quot;binding&quot;" alwaysStopAt="true" />
    <variable name="value" expression="" defaultValue="&quot;value&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="letfn" value="(letfn [($name$) [$args$]&#10;          $END$)])" description="letfn" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="name" expression="" defaultValue="&quot;name&quot;" alwaysStopAt="true" />
    <variable name="args" expression="" defaultValue="&quot;args&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="map" value="(map #($expr$) $seq$)" description="map with anonymous fn" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="expr" expression="" defaultValue="&quot;expr&quot;" alwaysStopAt="true" />
    <variable name="seq" expression="" defaultValue="&quot;seq&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="print" value="(println $expr$)" description="print" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="expr" expression="" defaultValue="&quot;expr&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="reduce" value="(reduce $function$ $seq$)" description="reduce" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="function" expression="" defaultValue="&quot;function&quot;" alwaysStopAt="true" />
    <variable name="seq" expression="" defaultValue="&quot;seq&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="refer" value="(:refer-clojure :exclude [$END$])" description="refer-clojure ns clause" toReformat="false" toShortenFQNames="true" deactivated="true">
    <context />
  </template>
  <template name="require" value="(:require [$namespace$ :as [$END$]])" description="require ns clause" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="namespace" expression="" defaultValue="&quot;namespace&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="test" value="(deftest $name$&#10;  (is (= $first$ $second$))&#10;  $END$)" description="clojure.test test" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="name" expression="" defaultValue="&quot;name&quot;" alwaysStopAt="true" />
    <variable name="first" expression="" defaultValue="&quot;first&quot;" alwaysStopAt="true" />
    <variable name="second" expression="" defaultValue="&quot;second&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="try" value="(try&#10;  $SELECTION$&#10;  (catch $Exception$ e&#10;    $END$))" description="Wrap with try/catch" toReformat="true" toShortenFQNames="true" deactivated="true">
    <variable name="Exception" expression="" defaultValue="&quot;Exception&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="use" value="(:use [$namespace$ :only [$END$]])" description="use ns clause" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="namespace" expression="" defaultValue="&quot;namespace&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="when" value="(when $condition$&#10;  $END$)" description="when" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="condition" expression="" defaultValue="&quot;condition&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="whenl" value="(when-let [$binding$ $value$]&#10;  $END$)" description="whenl" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="binding" expression="" defaultValue="&quot;binding&quot;" alwaysStopAt="true" />
    <variable name="value" expression="" defaultValue="&quot;value&quot;" alwaysStopAt="true" />
    <context />
  </template>
</templateSet>